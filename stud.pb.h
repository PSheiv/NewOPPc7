// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stud_2eproto;
namespace stud {
class FullName;
class FullNameDefaultTypeInternal;
extern FullNameDefaultTypeInternal _FullName_default_instance_;
class Student;
class StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentsGroup;
class StudentsGroupDefaultTypeInternal;
extern StudentsGroupDefaultTypeInternal _StudentsGroup_default_instance_;
}  // namespace stud
PROTOBUF_NAMESPACE_OPEN
template<> ::stud::FullName* Arena::CreateMaybeMessage<::stud::FullName>(Arena*);
template<> ::stud::Student* Arena::CreateMaybeMessage<::stud::Student>(Arena*);
template<> ::stud::StudentsGroup* Arena::CreateMaybeMessage<::stud::StudentsGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stud {

// ===================================================================

class FullName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stud.FullName) */ {
 public:
  inline FullName() : FullName(nullptr) {}
  virtual ~FullName();

  FullName(const FullName& from);
  FullName(FullName&& from) noexcept
    : FullName() {
    *this = ::std::move(from);
  }

  inline FullName& operator=(const FullName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullName& operator=(FullName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullName* internal_default_instance() {
    return reinterpret_cast<const FullName*>(
               &_FullName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullName& a, FullName& b) {
    a.Swap(&b);
  }
  inline void Swap(FullName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullName* New() const final {
    return CreateMaybeMessage<FullName>(nullptr);
  }

  FullName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullName& from);
  void MergeFrom(const FullName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stud.FullName";
  }
  protected:
  explicit FullName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stud_2eproto);
    return ::descriptor_table_stud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPatronymicFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  void set_surname(const std::string& value);
  void set_surname(std::string&& value);
  void set_surname(const char* value);
  void set_surname(const char* value, size_t size);
  std::string* mutable_surname();
  std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string patronymic = 3;
  void clear_patronymic();
  const std::string& patronymic() const;
  void set_patronymic(const std::string& value);
  void set_patronymic(std::string&& value);
  void set_patronymic(const char* value);
  void set_patronymic(const char* value, size_t size);
  std::string* mutable_patronymic();
  std::string* release_patronymic();
  void set_allocated_patronymic(std::string* patronymic);
  private:
  const std::string& _internal_patronymic() const;
  void _internal_set_patronymic(const std::string& value);
  std::string* _internal_mutable_patronymic();
  public:

  // @@protoc_insertion_point(class_scope:stud.FullName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patronymic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stud_2eproto;
};
// -------------------------------------------------------------------

class Student PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stud.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  virtual ~Student();

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Student& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return CreateMaybeMessage<Student>(nullptr);
  }

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stud.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stud_2eproto);
    return ::descriptor_table_stud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullnameFieldNumber = 1,
    kGradesFieldNumber = 2,
    kAverageFieldNumber = 3,
  };
  // repeated .stud.FullName fullname = 1;
  int fullname_size() const;
  private:
  int _internal_fullname_size() const;
  public:
  void clear_fullname();
  ::stud::FullName* mutable_fullname(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::FullName >*
      mutable_fullname();
  private:
  const ::stud::FullName& _internal_fullname(int index) const;
  ::stud::FullName* _internal_add_fullname();
  public:
  const ::stud::FullName& fullname(int index) const;
  ::stud::FullName* add_fullname();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::FullName >&
      fullname() const;

  // repeated string grades = 2;
  int grades_size() const;
  private:
  int _internal_grades_size() const;
  public:
  void clear_grades();
  const std::string& grades(int index) const;
  std::string* mutable_grades(int index);
  void set_grades(int index, const std::string& value);
  void set_grades(int index, std::string&& value);
  void set_grades(int index, const char* value);
  void set_grades(int index, const char* value, size_t size);
  std::string* add_grades();
  void add_grades(const std::string& value);
  void add_grades(std::string&& value);
  void add_grades(const char* value);
  void add_grades(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& grades() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_grades();
  private:
  const std::string& _internal_grades(int index) const;
  std::string* _internal_add_grades();
  public:

  // float average = 3;
  void clear_average();
  float average() const;
  void set_average(float value);
  private:
  float _internal_average() const;
  void _internal_set_average(float value);
  public:

  // @@protoc_insertion_point(class_scope:stud.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::FullName > fullname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> grades_;
  float average_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stud_2eproto;
};
// -------------------------------------------------------------------

class StudentsGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stud.StudentsGroup) */ {
 public:
  inline StudentsGroup() : StudentsGroup(nullptr) {}
  virtual ~StudentsGroup();

  StudentsGroup(const StudentsGroup& from);
  StudentsGroup(StudentsGroup&& from) noexcept
    : StudentsGroup() {
    *this = ::std::move(from);
  }

  inline StudentsGroup& operator=(const StudentsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentsGroup& operator=(StudentsGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentsGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentsGroup* internal_default_instance() {
    return reinterpret_cast<const StudentsGroup*>(
               &_StudentsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StudentsGroup& a, StudentsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentsGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentsGroup* New() const final {
    return CreateMaybeMessage<StudentsGroup>(nullptr);
  }

  StudentsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentsGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentsGroup& from);
  void MergeFrom(const StudentsGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentsGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stud.StudentsGroup";
  }
  protected:
  explicit StudentsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stud_2eproto);
    return ::descriptor_table_stud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentFieldNumber = 1,
  };
  // repeated .stud.Student student = 1;
  int student_size() const;
  private:
  int _internal_student_size() const;
  public:
  void clear_student();
  ::stud::Student* mutable_student(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::Student >*
      mutable_student();
  private:
  const ::stud::Student& _internal_student(int index) const;
  ::stud::Student* _internal_add_student();
  public:
  const ::stud::Student& student(int index) const;
  ::stud::Student* add_student();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::Student >&
      student() const;

  // @@protoc_insertion_point(class_scope:stud.StudentsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::Student > student_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullName

// string name = 1;
inline void FullName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::name() const {
  // @@protoc_insertion_point(field_get:stud.FullName.name)
  return _internal_name();
}
inline void FullName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:stud.FullName.name)
}
inline std::string* FullName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:stud.FullName.name)
  return _internal_mutable_name();
}
inline const std::string& FullName::_internal_name() const {
  return name_.Get();
}
inline void FullName::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:stud.FullName.name)
}
inline void FullName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:stud.FullName.name)
}
inline void FullName::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:stud.FullName.name)
}
inline std::string* FullName::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_name() {
  // @@protoc_insertion_point(field_release:stud.FullName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:stud.FullName.name)
}

// string surname = 2;
inline void FullName::clear_surname() {
  surname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::surname() const {
  // @@protoc_insertion_point(field_get:stud.FullName.surname)
  return _internal_surname();
}
inline void FullName::set_surname(const std::string& value) {
  _internal_set_surname(value);
  // @@protoc_insertion_point(field_set:stud.FullName.surname)
}
inline std::string* FullName::mutable_surname() {
  // @@protoc_insertion_point(field_mutable:stud.FullName.surname)
  return _internal_mutable_surname();
}
inline const std::string& FullName::_internal_surname() const {
  return surname_.Get();
}
inline void FullName::_internal_set_surname(const std::string& value) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_surname(std::string&& value) {
  
  surname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:stud.FullName.surname)
}
inline void FullName::set_surname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:stud.FullName.surname)
}
inline void FullName::set_surname(const char* value,
    size_t size) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:stud.FullName.surname)
}
inline std::string* FullName::_internal_mutable_surname() {
  
  return surname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_surname() {
  // @@protoc_insertion_point(field_release:stud.FullName.surname)
  return surname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:stud.FullName.surname)
}

// string patronymic = 3;
inline void FullName::clear_patronymic() {
  patronymic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::patronymic() const {
  // @@protoc_insertion_point(field_get:stud.FullName.patronymic)
  return _internal_patronymic();
}
inline void FullName::set_patronymic(const std::string& value) {
  _internal_set_patronymic(value);
  // @@protoc_insertion_point(field_set:stud.FullName.patronymic)
}
inline std::string* FullName::mutable_patronymic() {
  // @@protoc_insertion_point(field_mutable:stud.FullName.patronymic)
  return _internal_mutable_patronymic();
}
inline const std::string& FullName::_internal_patronymic() const {
  return patronymic_.Get();
}
inline void FullName::_internal_set_patronymic(const std::string& value) {
  
  patronymic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_patronymic(std::string&& value) {
  
  patronymic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:stud.FullName.patronymic)
}
inline void FullName::set_patronymic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patronymic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:stud.FullName.patronymic)
}
inline void FullName::set_patronymic(const char* value,
    size_t size) {
  
  patronymic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:stud.FullName.patronymic)
}
inline std::string* FullName::_internal_mutable_patronymic() {
  
  return patronymic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_patronymic() {
  // @@protoc_insertion_point(field_release:stud.FullName.patronymic)
  return patronymic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_patronymic(std::string* patronymic) {
  if (patronymic != nullptr) {
    
  } else {
    
  }
  patronymic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patronymic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:stud.FullName.patronymic)
}

// -------------------------------------------------------------------

// Student

// repeated .stud.FullName fullname = 1;
inline int Student::_internal_fullname_size() const {
  return fullname_.size();
}
inline int Student::fullname_size() const {
  return _internal_fullname_size();
}
inline void Student::clear_fullname() {
  fullname_.Clear();
}
inline ::stud::FullName* Student::mutable_fullname(int index) {
  // @@protoc_insertion_point(field_mutable:stud.Student.fullname)
  return fullname_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::FullName >*
Student::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable_list:stud.Student.fullname)
  return &fullname_;
}
inline const ::stud::FullName& Student::_internal_fullname(int index) const {
  return fullname_.Get(index);
}
inline const ::stud::FullName& Student::fullname(int index) const {
  // @@protoc_insertion_point(field_get:stud.Student.fullname)
  return _internal_fullname(index);
}
inline ::stud::FullName* Student::_internal_add_fullname() {
  return fullname_.Add();
}
inline ::stud::FullName* Student::add_fullname() {
  // @@protoc_insertion_point(field_add:stud.Student.fullname)
  return _internal_add_fullname();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::FullName >&
Student::fullname() const {
  // @@protoc_insertion_point(field_list:stud.Student.fullname)
  return fullname_;
}

// repeated string grades = 2;
inline int Student::_internal_grades_size() const {
  return grades_.size();
}
inline int Student::grades_size() const {
  return _internal_grades_size();
}
inline void Student::clear_grades() {
  grades_.Clear();
}
inline std::string* Student::add_grades() {
  // @@protoc_insertion_point(field_add_mutable:stud.Student.grades)
  return _internal_add_grades();
}
inline const std::string& Student::_internal_grades(int index) const {
  return grades_.Get(index);
}
inline const std::string& Student::grades(int index) const {
  // @@protoc_insertion_point(field_get:stud.Student.grades)
  return _internal_grades(index);
}
inline std::string* Student::mutable_grades(int index) {
  // @@protoc_insertion_point(field_mutable:stud.Student.grades)
  return grades_.Mutable(index);
}
inline void Student::set_grades(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:stud.Student.grades)
  grades_.Mutable(index)->assign(value);
}
inline void Student::set_grades(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:stud.Student.grades)
  grades_.Mutable(index)->assign(std::move(value));
}
inline void Student::set_grades(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grades_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stud.Student.grades)
}
inline void Student::set_grades(int index, const char* value, size_t size) {
  grades_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stud.Student.grades)
}
inline std::string* Student::_internal_add_grades() {
  return grades_.Add();
}
inline void Student::add_grades(const std::string& value) {
  grades_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stud.Student.grades)
}
inline void Student::add_grades(std::string&& value) {
  grades_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:stud.Student.grades)
}
inline void Student::add_grades(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grades_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stud.Student.grades)
}
inline void Student::add_grades(const char* value, size_t size) {
  grades_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stud.Student.grades)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Student::grades() const {
  // @@protoc_insertion_point(field_list:stud.Student.grades)
  return grades_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Student::mutable_grades() {
  // @@protoc_insertion_point(field_mutable_list:stud.Student.grades)
  return &grades_;
}

// float average = 3;
inline void Student::clear_average() {
  average_ = 0;
}
inline float Student::_internal_average() const {
  return average_;
}
inline float Student::average() const {
  // @@protoc_insertion_point(field_get:stud.Student.average)
  return _internal_average();
}
inline void Student::_internal_set_average(float value) {
  
  average_ = value;
}
inline void Student::set_average(float value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:stud.Student.average)
}

// -------------------------------------------------------------------

// StudentsGroup

// repeated .stud.Student student = 1;
inline int StudentsGroup::_internal_student_size() const {
  return student_.size();
}
inline int StudentsGroup::student_size() const {
  return _internal_student_size();
}
inline void StudentsGroup::clear_student() {
  student_.Clear();
}
inline ::stud::Student* StudentsGroup::mutable_student(int index) {
  // @@protoc_insertion_point(field_mutable:stud.StudentsGroup.student)
  return student_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::Student >*
StudentsGroup::mutable_student() {
  // @@protoc_insertion_point(field_mutable_list:stud.StudentsGroup.student)
  return &student_;
}
inline const ::stud::Student& StudentsGroup::_internal_student(int index) const {
  return student_.Get(index);
}
inline const ::stud::Student& StudentsGroup::student(int index) const {
  // @@protoc_insertion_point(field_get:stud.StudentsGroup.student)
  return _internal_student(index);
}
inline ::stud::Student* StudentsGroup::_internal_add_student() {
  return student_.Add();
}
inline ::stud::Student* StudentsGroup::add_student() {
  // @@protoc_insertion_point(field_add:stud.StudentsGroup.student)
  return _internal_add_student();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stud::Student >&
StudentsGroup::student() const {
  // @@protoc_insertion_point(field_list:stud.StudentsGroup.student)
  return student_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stud_2eproto
